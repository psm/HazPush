// Generated by CoffeeScript 1.10.0
(function() {
  var Config, HTTP_PORT, Log, MyDate, app, crypto, debug, express, git, pad, server;

  express = require('express');

  git = require('gift');

  crypto = require('crypto');

  app = express();

  Config = require('./config');

  Config.watch();

  debug = false;

  HTTP_PORT = process.argv[2] || 3636;

  pad = function(str) {
    str = str.toString();
    while (str.length < 2) {
      str = "0" + str;
    }
    return str;
  };

  MyDate = function() {
    var d, date, str, time;
    d = new Date();
    date = [d.getFullYear(), d.getMonth() + 1, d.getDate()].map(pad);
    time = [d.getHours(), d.getMinutes(), d.getSeconds()].map(pad);
    return str = (date.join('-')) + " " + (time.join(':'));
  };

  Log = function(type, msg) {
    var method;
    if (!msg) {
      msg = type;
      type = 'info';
    }
    method = (function() {
      switch (type) {
        case 'info':
          return console.log;
        case 'warn':
          return console.warn;
        case 'error':
          return console.error;
        default:
          return console.log;
      }
    })();
    return method("[" + (type.toUpperCase()) + "] " + (MyDate()) + " - " + msg);
  };

  Log("Hazpush Server running on port: " + HTTP_PORT);

  app.use(function(req, res, next) {
    var data;
    data = '';
    req.setEncoding('utf8');
    req.on('data', function(chunk) {
      return data += chunk;
    });
    return req.on('end', function() {
      req.rawBody = data;
      return next();
    });
  });

  app.all('/pull/*', function(req, res) {
    var err, error1, git_error, git_repo, info, msg, repo, repos, signature, verified;
    repo = req.params[0];
    repos = Config.get('repos');
    if (!repos) {
      msg = "There are no repos configured. Try `hazpush add`";
      Log('error', msg);
      res.status(500).send(msg);
      return;
    }
    info = repos[repo];
    if (!info) {
      Log('error', "Repo not configured: " + repo);
      res.status(404).send('Repo not found');
      return;
    }
    Log("Pull requested for " + repo);
    try {
      signature = req.headers['x-hub-signature'].split('=')[1];
    } catch (error1) {
      err = error1;
      Log('error', "Could not parse Github's signature");
      res.status(401).send('Invalid Signature');
      return;
    }
    verified = crypto.createHmac('sha1', info.secret).update(new Buffer(req.rawBody)).digest('hex');
    if (signature !== verified) {
      Log('error', "Invalid signature, got: <" + signature + ">, expected: <" + verified + ">");
      res.status(401).send('Invalid signature');
      return;
    }
    git_error = function(err) {
      Log('error', "Git error: " + err);
      return res.status(500).send("Git error: " + err);
    };
    git_repo = git(info.path);
    return git_repo.status(function(err, status) {
      var error;
      if (err) {
        return git_error(err);
      }
      if (status.clean !== true) {
        error = {
          error: "Can't pull, unstaged changes",
          changes: status.files
        };
        Log('warn', error.error);
        return res.json(409, error);
      }
      return git_repo.pull(function(err) {
        if (err) {
          return git_error(err);
        }
        Log("Pulled");
        return res.status(200).send('Pulled');
      });
    });
  });

  server = app.listen(HTTP_PORT, function() {
    var address;
    address = server.address();
    return Log("Listening on " + address.address + ":" + address.port);
  });

}).call(this);
